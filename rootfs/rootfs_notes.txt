
##################################################
#Create root file system

sudo su
cd ~mike/Linux
rm -rf rootfs
mkdir rootfs

##################################################
# Building Busybox
# https://gist.github.com/vsergeev/2391575
# See vi problem here: http://lists.busybox.net/pipermail/busybox-cvs/2008-September/028214.html

cd ~mike/Linux/sources
git clone git://busybox.net/busybox.git
cd busybox
git checkout origin/1_22_stable
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- defconfig
LDFLAGS="--static" make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j4
LDFLAGS="--static" make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- install
rsync -a _install/ ../../rootfs/

##################################################
# Copy the Binaries to the Rootfs

cd ~mike/Nuvoton/bsp/sources/binaries
rsync -a rootfs/ ../../rootfs-minimal/

##################################################
# Create the Lib Romfs

cd ~mike/Nuvoton/bsp/sources/lib
genromfs -f ../../image/lib_romfs.bin -d ./lib

##################################################
# Building NodeJS
# http://events.linuxfoundation.org/sites/events/files/slides/nodejs-presentation_0.pdf
# See armv5 instructions: http://www.nodejs-news.com/nodejs-tech/nodejs-armv5-armv6-howto/

cd ~mike/Nuvoton/bsp/sources
git clone git://github.com/joyent/node.git
cd node
git checkout v0.8.26-release
AR=arm-none-linux-gnueabi-ar CC=arm-none-linux-gnueabi-gcc \
  CXX=arm-none-linux-gnueabi-g++ LINK=arm-none-linux-gnueabi-g++ \
  ./configure --without-ssl --without-npm --without-snapshot \
  --dest-cpu=arm --dest-os=linux --prefix=/usr/nodejs \
  --with-arm-float-abi=soft
AR=arm-none-linux-gnueabi-ar CC=arm-none-linux-gnueabi-gcc \
  CXX=arm-none-linux-gnueabi-g++ LINK=arm-none-linux-gnueabi-g++ \
  make --jobs=8
AR=arm-none-linux-gnueabi-ar CC=arm-none-linux-gnueabi-gcc \
  CXX=arm-none-linux-gnueabi-g++ LINK=arm-none-linux-gnueabi-g++ \
  make install DESTDIR=`pwd`/node-arm/

genromfs -f ../../image/nodejs_romfs.bin -d ./node-arm/usr/nodejs

##################################################
# Create the Curl Romfs

cd ~mike/Nuvoton/bsp/sources/curl/
genromfs -f ../../image/curl_romfs.bin -d ./curl

##################################################
# Create the Dropbear Romfs

cd ~mike/Nuvoton/bsp/sources/dropbear
genromfs -f ../../image/dropbear_romfs.bin -d ./dropbear

##################################################
# Copy Wifi Binaries and Configuration

cd ~mike/Nuvoton/bsp/sources/wifi
genromfs -f ../../image/wifi_romfs.bin -d ./wifi

##################################################
# Copy Netplug Binaries and Configuration

cd ~mike/Nuvoton/bsp/sources/netplug
genromfs -f ../../image/netplug_romfs.bin -d ./netplug

##################################################
# Copy NodeJS Binaries and Configuration

cd ~mike/Nuvoton/bsp/sources/nodejs
genromfs -f ../../image/nodejs_romfs.bin -d ./nodejs

##################################################
# Copy ALSA Binaries and Configuration

cd ~mike/Nuvoton/bsp/sources/alsa
genromfs -f ../../image/alsa_romfs.bin -d ./alsa

##################################################
# Setup essential root filesystem files

cd ~mike/Nuvoton/bsp/rootfs-minimal/

# Set sticky bit on busybox
chmod u+s bin/busybox

# Create various mountpoints and directories
mkdir proc
mkdir sys
mkdir dev
mkdir mnt
mkdir tmp
mkdir -p var/shm
mkdir -p etc/network
mkdir -p etc/netplug

# Create Core Device files
mknod dev/console c 5 1
mknod dev/null c 1 3

# Create a basic inittab for init
mkdir etc
cat <<EOF > etc/inittab
# Boot-time system configuration/initialization script.

# Stuff to do when run first except when booting in single-user mode
::sysinit:/etc/init.d/rcS
::sysinit:/bin/hostname -F /etc/hostname

# Note below that we prefix the shell commands with a "-" to indicate to the
# shell that it is supposed to be a login shell.  Normally this is handled by
# login, but since we are bypassing login in this case, BusyBox lets you do
# this yourself...
# Start an "askfirst" shell on the console
#::once:-/bin/sh
#::askfirst:-/bin/sh
::respawn:/sbin/getty -L ttyS1 115200 vt100

# Stuff to do when restarting the init process
::restart:/sbin/init

# Stuff to do before rebooting
::shutdown:/sbin/swapoff -a
::shutdown:/bin/umount -a -r
EOF
chmod 644 etc/inittab

# Create the fstab file
cat <<EOF > etc/fstab
proc  /proc      proc    defaults     0      0
none  /var/shm   shm     defaults     0      0
sysfs /sys       sysfs   defaults     0      0
none  /tmp       ramfs   defaults     0      0
none  /mnt       ramfs   defaults     0      0
none  /var       ramfs   defaults     0      0
EOF
chmod 644 etc/fstab

# Create the mdev file
cat <<EOF > etc/mdev.conf
mmcblk([0-9]+)p([0-9]+) 0:0 660 */sbin/automount.sh \$MDEV
#mmcblk([0-9]+)          0:0 660 */sbin/automount.sh \$MDEV
sd([a-z]+)([0-9]+)      0:0 660 */sbin/automount.sh \$MDEV
#sd([a-z]+)              0:0 660 */sbin/automount.sh \$MDEV
mtdblock([0-9]+)        0:0 660 */sbin/automount.sh \$MDEV
EOF
chmod 644 etc/mdev.conf

# Create the init.d/rcS
mkdir -p etc/init.d
cat <<EOF > etc/init.d/rcS
#!/bin/sh
echo Running rcS

# Mount file systems
/bin/mount -t proc proc /proc
/bin/mount -t sysfs sysfs /sys
/bin/mount -t tmpfs -o size=64k,mode=0755 tmpfs /dev

# Fill in /dev and automount SD partitions
/bin/mkdir /dev/pts
/bin/mount -t devpts devpts /dev/pts
/bin/echo > /dev/mdev.seq
#/bin/echo /sbin/mdev > /proc/sys/kernel/hotplug
/sbin/mdev -s

# Linking the boot directory
if [ -d /mnt/mmcblk0p1 ]; then
  echo "Linking the /boot directory"
  /bin/ln -s /mnt/mmcblk0p1 /boot
else
  echo "Failed to link the /boot directory"
fi

# Mount the wifi romfs
if [ -f /boot/wifi_romfs.bin ]; then
  echo "Mounting wifi_romfs.bin"
  mkdir -p /usr/wifi
  mount -t romfs /boot/wifi_romfs.bin /usr/wifi
  if [ ! "\$?" == "0" ]; then
    echo "Failed to mount wifi_romfs.bin"
  fi
fi

# Mount the netplug romfs
if [ -f /boot/netplug_romfs.bin ]; then
  echo "Mounting netplug_romfs.bin"
  mkdir -p /usr/netplug
  mount -t romfs /boot/netplug_romfs.bin /usr/netplug
  if [ ! "\$?" == "0" ]; then
    echo "Failed to mount netplug_romfs.bin"
  fi
fi

# Copy the default network configuration file
if [ ! -f /boot/network_config ]; then
  if [ -f /usr/wifi/network_config.default ]; then
    echo "Creating default network configuration"
    cp /usr/wifi/network_config.default /boot/network_config
  fi
fi
EOF
chmod 755 etc/init.d/rcS

# Create a root user with an empty password
mkdir root
cat <<EOF > etc/passwd
root:x:0:0:root:/root:/bin/sh
EOF
chmod 644 etc/passwd

cat <<EOF > etc/shadow
root::10933:0:99999:7:::
EOF
chmod 644 etc/shadow

cat <<EOF > etc/group
root:x:0:root
EOF
chmod 644 etc/group

# Install a basic udhcpc script
mkdir -p usr/share/udhcpc
cp ~mike/Nuvoton/bsp/sources/busybox/examples/udhcp/simple.script usr/share/udhcpc/default.script

# Designate a hostname
cat <<EOF > etc/hostname
minilinux
EOF
chmod 644 etc/hostname

# Create nework config file
cat <<EOF > etc/network_config
BOOTPROTO STATIC
IPADDR 192.168.1.155
GATEWAY 192.168.1.1
SSID "ologic"
AUTH_MODE WPA2PSK
ENCRYPT_TYPE AES
AUTH_KEY r0b0tinmyh3ad
WPS_TRIG_KEY HOME

AP_IPADDR 192.168.100.1
AP_SSID "Minilinux"
AP_AUTH_MODE WPA2PSK
AP_ENCRYPT_TYPE AES
AP_AUTH_KEY 12345678
AP_CHANNEL AUTO
EOF
chmod 644 etc/network_config

# Create automount shell script.
cat <<EOF > sbin/automount.sh
#!/bin/sh

if [ "\$1" == "" ]; then
  echo "parameter is none" > /tmp/error.txt
  exit 1
fi

MNT=\$1
if echo "\$1" | grep mmcblk; then
  if echo "\$1" | grep p[25]; then
    MNT=sdcard2
  else
    MNT=sdcard
  fi
else
  if echo "\$1" | grep sd; then
    if echo "\$1" | grep [25]; then
      MNT=nandcard2
    else
      MNT=nandcard
    fi
  fi
fi

mounted=\`mount | grep \$1 | wc -l\`
#echo "par=\$1,mounted=\$mounted,MNT=\$MNT" > /dev/console

# not mounted, lets mount under /mnt
if [ \$mounted -lt 1 ]; then
  if ! mkdir -p "/mnt/\$1"; then
    exit 1
  fi

#try jffs2 first
  if ! mount -t jffs2 "/dev/\$1" "/mnt/\$1" > /dev/null 2>&1; then
#try vfat
    if ! mount -t vfat -o noatime,shortname=mixed,utf8 "/dev/\$1" "/mnt/\$1" > /dev/null 2>&1; then
# failed to mount, clean up mountpoint
      if ! rmdir "/mnt/\$1"; then
        exit 1
      fi
      exit 1
    else
      ln -s /mnt/\$1 /mnt/\$MNT
      echo "[Mount VFAT]: /dev/\$1 --> /mnt/\$MNT" > /dev/console
      echo "A/mnt/\$1" >> /tmp/usbmnt.log
      echo "A/mnt/\$1" > /tmp/fifo.1
    fi
  else
    echo "[Mount JFFS2]: /dev/\$1 --> /mnt/\$MNT" > /dev/console
    echo "A/mnt/\$1" >> /tmp/usbmnt.log
    echo "A/mnt/\$1" > /tmp/fifo.1
  fi
fi
EOF
chmod 755 sbin/automount.sh

